const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

async function run() {
  const chatSession = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "https://ui.shadcn.com/docs/installation/next"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "Okay, I've reviewed the link you provided, which points to the installation instructions for **shadcn/ui** within a **Next.js** project. Here's a breakdown of what that page covers and how you would typically use it:\n\n**Key Takeaways from the shadcn/ui Installation for Next.js:**\n\n1. **`init` Command:**\n   - The primary method for installing and configuring shadcn/ui is using the `init` command via your terminal.\n   - This command does several things:\n      - Installs the required dependencies.\n      - Adds a `components.json` file for configuration.\n      - Optionally adds global CSS styles and a `utils.ts` file.\n   - The command will look something like this:\n     ```bash\n     npx shadcn-ui@latest init\n     ```\n\n2. **Interactive Prompts:**\n   - After running the `init` command, you'll be prompted with a series of interactive questions:\n      - **Would you like to use TypeScript?** (Yes/No)\n      - **Which style would you like to use?** (Default/New York/.. or custom Tailwind CSS configuration)\n      - **Where is your global CSS file?** (e.g., `app/globals.css`, `src/app/globals.css`)\n      - **Would you like to use the default color palette?** (Yes/No)\n      - **Where is your tailwind.config.js?** (e.g., `tailwind.config.js`)\n      - **Would you like to configure the import alias?** (e.g., `@/components`)\n      - **Do you want to add `src` to your import alias?** (Yes/No)\n      - **Would you like to write components?** (Yes/No)\n   - Answering these correctly will ensure the proper setup for your project.\n\n3. **Adding Components:**\n   - Once `shadcn-ui` is initialized, you can add individual components using the `add` command:\n     ```bash\n     npx shadcn-ui@latest add button\n     ```\n     This would install and configure the `button` component, including the necessary Tailwind CSS classes and any underlying code.\n\n4. **Tailwind CSS Integration:**\n   - shadcn/ui relies heavily on Tailwind CSS for styling. You need to have Tailwind CSS properly configured in your project before using `shadcn/ui`.\n   - The `init` command helps ensure Tailwind CSS and shadcn/ui's styles work together correctly.\n\n5. **Component Customization:**\n   - You can customize the components by editing their underlying code. This gives you complete control over their appearance and behavior.\n   - You can also customize Tailwind CSS to create a custom theme.\n\n6. **`components.json`:**\n   - This file is crucial for managing your `shadcn/ui` configuration, including the import alias and base color configuration.\n\n7. **No External Libraries:**\n    - The beauty of `shadcn/ui` is that it doesn't install a component library. Instead, it copies the component's source code directly into your project, giving you complete control over the code.\n\n**Steps to Install shadcn/ui in your Next.js project:**\n\n1. **Create a Next.js App (if you don't have one yet):**\n   ```bash\n   npx create-next-app@latest my-shadcn-app\n   cd my-shadcn-app\n   ```\n\n2. **Install Tailwind CSS (if not already installed):**\n   ```bash\n   npm install -D tailwindcss postcss autoprefixer\n   npx tailwindcss init -p\n   ```\n   -  **Tailwind Configuration (tailwind.config.js)** You need to set the `content` configuration in your `tailwind.config.js` to include the proper paths where tailwind classes are used.\n      ```javascript\n       /** @type {import('tailwindcss').Config} */\n       module.exports = {\n         content: [\n          './app/**/*.{js,ts,jsx,tsx,mdx}', // adjust this to include all your files\n          './components/**/*.{js,ts,jsx,tsx,mdx}',\n         ],\n         theme: {\n           extend: {},\n        },\n         plugins: [],\n       };\n      ```\n   -   **Include the tailwind directives in your global CSS:** In the file specified during the init process, you need to include the tailwind directives. Typically, this is `app/globals.css` or `src/app/globals.css`\n      ```css\n         @tailwind base;\n         @tailwind components;\n         @tailwind utilities;\n      ```\n\n3. **Run the shadcn/ui `init` command:**\n   ```bash\n   npx shadcn-ui@latest init\n   ```\n   - Carefully answer the prompts. Pay attention to the paths and aliases you choose.\n\n4. **Add a component (e.g., `button`):**\n   ```bash\n    npx shadcn-ui@latest add button\n   ```\n\n5. **Import and Use the Component:**\n    - In your Next.js components, import the new component. For example, in `app/page.tsx`, you would do the following:\n\n     ```tsx\n     import { Button } from \"@/components/ui/button\"\n\n     export default function Home() {\n        return (\n          <main>\n             <Button>Click Me</Button>\n          </main>\n        )\n      }\n\n     ```\n\n**Why Use shadcn/ui?**\n\n- **Customizable Components:** You have full control over the code.\n- **Tailwind CSS Integration:** Leverages the power of utility-first CSS.\n- **No Bloated Libraries:** No unnecessary code is added to your project.\n- **Great Developer Experience:** Easy to install and use.\n- **Beautiful UI:** Provides high-quality, accessible components.\n\n**In Summary**\n\nThe shadcn/ui installation process for Next.js is straightforward, especially with the `init` and `add` commands. The interactive prompts guide you through the setup, and the resulting components are easily customizable to fit your design needs. If you need help with particular steps, just ask!\n"},
        ],
      },
      {
        role: "user",
        parts: [
          {text: "next.js, shadcn, tailwindcssでtodoアプリを作って"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "はい、Next.js、shadcn/ui、Tailwind CSSを使ってTODOアプリを作成する手順を説明します。以下は、基本的なTODOアプリを作成するためのステップバイステップガイドです。\n\n**前提条件:**\n\n*   Node.jsとnpm (またはyarn、pnpm) がインストールされていること\n*   Next.jsプロジェクトが既に作成されていること（まだの場合は、以下の手順で作成してください）\n\n    ```bash\n    npx create-next-app@latest my-todo-app\n    cd my-todo-app\n    ```\n*   Tailwind CSSが既に設定されていること（まだの場合は、以下の手順で設定してください）\n    ```bash\n    npm install -D tailwindcss postcss autoprefixer\n    npx tailwindcss init -p\n    ```\n    `tailwind.config.js` の `content` に以下のパスが含まれていることを確認してください。\n    ```javascript\n    /** @type {import('tailwindcss').Config} */\n    module.exports = {\n      content: [\n        './app/**/*.{js,ts,jsx,tsx,mdx}',\n        './components/**/*.{js,ts,jsx,tsx,mdx}',\n      ],\n      theme: {\n        extend: {},\n      },\n      plugins: [],\n    }\n    ```\n    `app/globals.css`に以下のディレクティブを追加してください。\n    ```css\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n    ```\n*   shadcn/uiがインストール済みであること（まだの場合は、以下の手順でインストールしてください）\n    ```bash\n    npx shadcn-ui@latest init\n    ```\n    プロンプトに従って初期設定を行ってください。\n\n**ステップ1: コンポーネントの作成**\n\nまずは、TODOアプリに必要なコンポーネントを作成します。\n\n1.  **`TodoItem.tsx` (src/components/TodoItem.tsx):** 各TODOアイテムを表示するコンポーネント\n\n    ```tsx\n    import React, { useState } from 'react';\n    import { Checkbox } from '@/components/ui/checkbox'; // shadcn/uiのCheckboxコンポーネントを使用\n    import { Button } from '@/components/ui/button';   // shadcn/uiのButtonコンポーネントを使用\n\n    type TodoItemProps = {\n      id: string;\n      text: string;\n      completed: boolean;\n      onToggle: (id: string) => void;\n      onDelete: (id: string) => void;\n    };\n\n    const TodoItem: React.FC<TodoItemProps> = ({ id, text, completed, onToggle, onDelete }) => {\n    return (\n      <li className=\"flex items-center justify-between py-2 border-b border-gray-200\">\n          <div className=\"flex items-center\">\n            <Checkbox\n              id={id}\n              checked={completed}\n              onCheckedChange={() => onToggle(id)}\n            />\n            <label htmlFor={id} className={`ml-2 ${completed ? 'line-through text-gray-500' : ''}`}>{text}</label>\n          </div>\n        <Button variant=\"destructive\" size=\"sm\" onClick={() => onDelete(id)}>削除</Button>\n      </li>\n    );\n    };\n\n    export default TodoItem;\n    ```\n\n2.  **`TodoList.tsx` (src/components/TodoList.tsx):** TODOリストを表示するコンポーネント\n\n    ```tsx\n    import React from 'react';\n    import TodoItem from './TodoItem';\n    import { cn } from '@/lib/utils'; // ユーティリティ関数を使用\n\n    type TodoListProps = {\n      todos: { id: string; text: string; completed: boolean }[];\n      onToggle: (id: string) => void;\n      onDelete: (id: string) => void;\n    };\n\n    const TodoList: React.FC<TodoListProps> = ({ todos, onToggle, onDelete }) => {\n      return (\n        <ul className=\"mt-4\">\n          {todos.map((todo) => (\n            <TodoItem\n              key={todo.id}\n              id={todo.id}\n              text={todo.text}\n              completed={todo.completed}\n              onToggle={onToggle}\n              onDelete={onDelete}\n            />\n          ))}\n        </ul>\n      );\n    };\n\n    export default TodoList;\n    ```\n\n3.  **`TodoForm.tsx` (src/components/TodoForm.tsx):** 新しいTODOアイテムを追加するフォーム\n\n    ```tsx\n    import React, { useState } from 'react';\n    import { Button } from '@/components/ui/button';\n    import { Input } from '@/components/ui/input';\n\n    type TodoFormProps = {\n      onAdd: (text: string) => void;\n    };\n\n    const TodoForm: React.FC<TodoFormProps> = ({ onAdd }) => {\n        const [newTodo, setNewTodo] = useState('');\n\n        const handleSubmit = (e: React.FormEvent) => {\n            e.preventDefault();\n            if (newTodo.trim() !== '') {\n                onAdd(newTodo);\n                setNewTodo('');\n            }\n        };\n\n        return (\n          <form onSubmit={handleSubmit} className=\"flex mt-4\">\n            <Input\n              type=\"text\"\n              placeholder=\"新しいTODOを入力\"\n              value={newTodo}\n              onChange={(e) => setNewTodo(e.target.value)}\n              className=\"flex-1 mr-2\"\n            />\n              <Button type=\"submit\">追加</Button>\n          </form>\n        );\n      };\n\n    export default TodoForm;\n    ```\n    このコンポーネントを作成する際に、`shadcn`のButtonとInputコンポーネントを使用するために、以下のコマンドを実行してください\n    ```bash\n    npx shadcn-ui@latest add button input\n    ```\n\n4. **`lib/utils.ts` (src/lib/utils.ts):** ユーティリティ関数\n  ```typescript\n   import { clsx, type ClassValue } from \"clsx\"\n   import { twMerge } from \"tailwind-merge\"\n\n   export function cn(...inputs: ClassValue[]) {\n     return twMerge(clsx(inputs))\n   }\n  ```\n\n**ステップ2: ページでの実装**\n\n`app/page.tsx` にTODOアプリのメインロジックを実装します。\n\n```tsx\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport TodoList from '@/components/TodoList';\nimport TodoForm from '@/components/TodoForm';\nimport { v4 as uuidv4 } from 'uuid'; // UUID生成ライブラリ\n\nconst HomePage = () => {\n  const [todos, setTodos] = useState<{ id: string; text: string; completed: boolean }[]>(\n    []\n  );\n\n  // ローカルストレージからTODOリストを読み込む\n  useEffect(() => {\n    const storedTodos = localStorage.getItem('todos');\n    if (storedTodos) {\n      setTodos(JSON.parse(storedTodos));\n    }\n  }, []);\n\n  // TODOリストが変更されたらローカルストレージに保存する\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleAddTodo = (text: string) => {\n    const newTodo = {\n      id: uuidv4(),\n      text,\n      completed: false,\n    };\n    setTodos([...todos, newTodo]);\n  };\n\n  const handleToggleTodo = (id: string) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  };\n\n  const handleDeleteTodo = (id: string) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">TODOアプリ</h1>\n      <TodoForm onAdd={handleAddTodo} />\n      <TodoList\n        todos={todos}\n        onToggle={handleToggleTodo}\n        onDelete={handleDeleteTodo}\n      />\n    </div>\n  );\n};\n\nexport default HomePage;\n```\n\n**ステップ3: ライブラリのインストール**\nUUIDを生成するために以下のライブラリをインストールします。\n```bash\nnpm install uuid\n```\n\n**解説:**\n\n*   **`TodoList`:** 現在のTODOアイテムのリストを表示します。\n*   **`TodoItem`:** 各TODOアイテムをレンダリングし、チェックボックスと削除ボタンを含みます。\n*   **`TodoForm`:** 新しいTODOアイテムを追加するための入力フォームです。\n*   **`useState`:** `todos`の状態を管理します。\n*   **`useEffect`:** コンポーネントのマウント時にローカルストレージからデータをロードし、TODOリストが更新されるたびにローカルストレージに保存します。\n*   **`handleAddTodo`:** 新しいTODOアイテムを追加します。\n*   **`handleToggleTodo`:** TODOアイテムの完了状態を切り替えます。\n*   **`handleDeleteTodo`:** TODOアイテムを削除します。\n*   **`uuidv4`:** 各TODOアイテムにユニークなIDを生成するために使用します。\n*   **`shadcn/ui`:** ボタンとチェックボックスのUIコンポーネントを提供します。\n*   **`Tailwind CSS`:** スタイリングを提供します。\n\n**実行:**\n\n```bash\nnpm run dev\n```\n\n`http://localhost:3000` にアクセスすると、TODOアプリが表示されます。\n\n**追加のステップ:**\n\n*   エラーハンドリングの追加\n*   TODOアイテムの編集機能の追加\n*   より高度なスタイリングの適用\n*   Backendとの連携\n\nこのガイドが、Next.js、shadcn/ui、Tailwind CSSを使ったTODOアプリ開発の助けになることを願っています。質問があれば、お気軽にお尋ねください。\n"},
        ],
      },
    ],
  });

  const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
  console.log(result.response.text());
}

run();
